% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stability-3-graph-clustering.R
\name{plot_k_n_partitions}
\alias{plot_k_n_partitions}
\title{Relationship Between the Number of Clusters and the Number of Unique Partitions}
\usage{
plot_k_n_partitions(
  clust_object,
  colour_information = c("ecc", "freq_part"),
  dodge_width = 0.3,
  pt_size_range = c(1.5, 4),
  summary_function = median,
  y_step = 5
)
}
\arguments{
\item{clust_object}{An object or a concatenation of objects returned by the
`merge_resolutions` method.}

\item{colour_information}{String that specifies the information type that will be
illustrated using gradient colour: either `frequency_partition` for the frequency of the
most common partition or `ecc` for the Element-Centric Consistency
of the partitions obtained when the the number of clusters is fixed.}

\item{pt_size_range}{Indicates the minimum and the maximum size a point on the plot can have.}

\item{object_names}{Custom names that the user could assing to each
configuration; if not specified, the plot will use the generated configuration
names.}
}
\value{
A ggplot2 object. The color gradient suggests the frequency of the most
common partition relative to the total number of appearances of that specific
number of clusters or the Element-Centric Consistency of the partitions. The size
illustrates the frequency of the partitions with *k* clusters relative to the
total number of partitions.
}
\description{
For each configuration provided in clust_object, display how
many different partitions with the same number of clusters can be obtained
by changing the seed.
}
\examples{
set.seed(2021)
# create an artificial PCA embedding
pca_embedding <- matrix(runif(100 * 30), nrow = 100)
rownames(pca_embedding) <- as.character(1:100)
colnames(pca_embedding) <- paste0("PCA_", 1:30)

adj_matrix <- Seurat::FindNeighbors(pca_embedding,
  k.param = 10,
  nn.method = "rann",
  verbose = FALSE,
  compute.SNN = FALSE
)$nn
clust_diff_obj <- assess_clustering_stability(
  graph_adjacency_matrix = adj_matrix,
  resolution = c(0.5, 1),
  n_repetitions = 10,
  algorithm = 1:2,
  verbose = FALSE
)
plot_k_n_partitions(clust_diff_obj)
}
